version: '3.8'
x-postgres-creds:
  &postgres-creds
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

x-django-env:
  &django-env
  <<: *postgres-creds
  DJANGO_SECRET_KEY: very_secret_key
  DEBUG: True
  POSTGRES_PORT: 5432

services:
  translate:
    container_name: translate
    build: translate
    ports:
      - 8000:8000
    depends_on:
      - mule
      - react
      - camunda
      - django1
      - django2
    volumes:
      - ./translate:/app

  mule:
    container_name: mule
    image: wslph/mule:4.4.0-ee
    ports:
      - 8081:8081
    restart: always
    volumes:
      - ./mulesoft/apps:/opt/mule/apps
      - ./mulesoft/compiled_mulesoft:/opt/mule/compiled_mulesoft
      - ./mulesoft/logs:/opt/mule/am/logs
    environment:
      - MULE_ENV=dev

  react:
    container_name: react
    build: frontend
    ports:
      - 3000:3000
    restart: always
    volumes:
      - ./frontend:/app

  camunda:
    container_name: camunda
    image: maven:latest
    ports:
      - 8080:8080
    working_dir: /app
    volumes:
      - ./camunda:/app
    # command: mvn clean package spring-boot:run # for development
    command: java -jar target/partyOrganizer.jar

  django1:
    container_name: django1
    build: backend
    ports:
      - 8001:8000
    restart: always
    volumes:
      - ./backend:/app
    depends_on:
      postgres1:
        condition: service_healthy
    environment:
      <<: *django-env
      DJANGO_SETTINGS_MODULE: app.settings1
      POSTGRES_HOST: postgres1

  django2:
    container_name: django2
    build: backend
    ports:
      - 8002:8000
    restart: always
    volumes:
      - ./backend:/app
    depends_on:
      postgres2:
        condition: service_healthy

    environment:
      <<: *django-env
      DJANGO_SETTINGS_MODULE: app.settings2
      POSTGRES_HOST: postgres2

  postgres1:
    container_name: postgres1
    image: postgres:13
    volumes:
      - postgres1:/var/lib/postgresql/data
    environment:
      <<: *postgres-creds
    ports:
      - 5432:5432
    healthcheck:
      test: pg_isready -q -U postgres -d postgres || exit 1
      interval: 3s
      timeout: 3s
      retries: 10

  postgres2:
    container_name: postgres2
    image: postgres:13
    volumes:
      - postgres2:/var/lib/postgresql/data
    environment:
      <<: *postgres-creds
    ports:
      - 5433:5432
    healthcheck:
      test: pg_isready -q -U postgres -d postgres || exit 1
      interval: 3s
      timeout: 3s
      retries: 10

volumes:
  postgres1: {}
  postgres2: {}
